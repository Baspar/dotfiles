#!/usr/bin/env bash
usage() {
    echo ''
    echo 'Usage:'
    echo '  aws-curl --region REGION --service SERVICE  (-p1 PROVIDER1) (-p2 PROVIDER2) (--verbose) (--help) -- [Normal cURL arguments]'
}

region=""
service=""
provider1="aws"
provider2="amz"
verbose=""

declare -a ARGS
shopt -s extglob; # Enable complex match
while [ $# -gt 0 ]; do
    case "$1" in
        --region?(=*)|-r?(=*))
            region=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$region" ] && shift && region="$1"
            ;;
        --service?(=*)|-s?(=*))
            service=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$service" ] && shift && service="$1"
            ;;
        --provider2?(=*)|-p2?(=*))
            provider2=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$provider2" ] && shift && provider2="$1"
            ;;
        --provider1?(=*)|-p1?(=*))
            provider1=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$provider1" ] && shift && provider1="$1"
            ;;
        -h|--help)
            usage
            exit
            ;;
        -v|--verbose)
            verbose="--verbose"
            ;;
        --)
            read_args_now=true
            ;;
        -*)
            if [ "$read_args_now" ]; then
                ARGS+=( "$1" )
            else
                echo "Unknown flag: '$1'"
                usage
                exit 5
            fi
            ;;
        *)
            [ "$read_args_now" ] && ARGS+=( "$1" )
    esac
    shift
done

[ -z "$region" ] && {
    echo "Error: Missing region"
    usage
    exit 1
}
[ -z "$service" ] && {
    echo "Error: Missing service"
    usage
    exit 1
}
sigv4="$provider1:$provider2:$region:$service"
[ -n "$verbose" ] && echo "using sigv4 '$sigv4'"

if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
    [ -n "$verbose" ] && echo "using env var"
elif aws configure get aws_access_key_id >/dev/null && aws configure get aws_secret_access_key >/dev/null; then
    [ -n "$verbose" ] && echo "using profile values"
    AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
    AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
    AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
elif aws configure get credential_process >/dev/null; then
    [ -n "$verbose" ] && echo "using credential_process"
    credentials=$(eval $(aws configure get credential_process) | jq -r '[.AccessKeyId, .SecretAccessKey, .SessionToken] | join("|")') || exit 1
    AWS_ACCESS_KEY_ID=$(echo "$credentials" | cut -d'|' -f1)
    AWS_SECRET_ACCESS_KEY=$(echo "$credentials" | cut -d'|' -f2)
    AWS_SESSION_TOKEN=$(echo "$credentials" | cut -d'|' -f3)
fi

curl --aws-sigv4 "$sigv4" --user "$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY" -H "x-amz-security-token:$AWS_SESSION_TOKEN" $verbose "${ARGS[@]}"
