#!/usr/bin/env bash
shopt -s extglob; # Enable complex pattern match

usage() {
    local exit_code="${1:-0}"
    local error_msg="$2"
    
    if [ "$exit_code" -ne 0 ] && [ -n "$error_msg" ]; then
        echo "$error_msg" >&2
    fi
    
    echo "Usage:"
    echo ""
    echo "aws-curl --service SERVICE [--region REGION] [--provider1 PROVIDER1] [--provider2 PROVIDER2] [--unsigned-payload] [--verbose] [--help] -- [Normal cURL arguments]"
    echo " --service|-s            : Vendor code used for SigV4"
    echo " --region|-r             : AWS region used for SigV4 (Default: \$AWS_REGION)"
    echo " --provider1|-p1         : Provider1 used for SigV4 (Default : aws)"
    echo " --provider2|-p2         : Provider2 used for SigV4 (Default : amz)"
    echo " --unsigned-payload|-u   : Don't use payload checksum to sign the request"
    echo " --help|-h               : Display this help"
    echo " --verbose|-v            : Enable debug logs"
    echo " [Normal cURL arguments] : Any argument after -- will be passed to underlying cURL command"

    exit "$exit_code"
}


region=""
service=""
provider1="aws"
provider2="amz"
verbose=""
curl_args=()

declare -A seen=()
check_duplicate_arg() {
    local canonical_name=$1
    if [[ ${seen[$canonical_name]} ]]; then
        usage 1 "Error: Argument '${canonical_name}' specified multiple times"
    fi
    seen[$canonical_name]=1
}

while (($#)); do
    case "$1" in
        --region?(=*)|-r?(=*))
            check_duplicate_arg "region"
            region=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$region" ] && shift && region="$1"
            ;;
        --service?(=*)|-s?(=*))
            check_duplicate_arg "service"
            service=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$service" ] && shift && service="$1"
            ;;
        --provider2?(=*)|-p2?(=*))
            check_duplicate_arg "provider2"
            provider2=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$provider2" ] && shift && provider2="$1"
            ;;
        --provider1?(=*)|-p1?(=*))
            check_duplicate_arg "provider1"
            provider1=$(echo "$1" | cut -s -d= -f2-)
            ! [ "$provider1" ] && shift && provider1="$1"
            ;;
        -h|--help)
            usage
            ;;
        -v|--verbose)
            check_duplicate_arg "verbose"
            verbose="--verbose"
            ;;
        --unsigned-payload|-u)
            check_duplicate_arg "unsigned-payload"
            curl_args+=( '-H' 'x-amz-content-sha256: UNSIGNED-PAYLOAD' )
            ;;
        --)
            curl_args+=( "${@:2}" )
            set --
            ;;
        *)
            usage 5 "Unknown flag or argument: '$1'"
            ;;
    esac
    shift
done

! [ "$region" ] && usage 1 "Error: Missing region"
! [ "$service" ] && usage 1 "Error: Missing service"

sigv4="$provider1:$provider2:$region:$service"
[ "$verbose" ] && echo "using sigv4 '$sigv4'"

if [ "$AWS_ACCESS_KEY_ID" ] && [ "$AWS_SECRET_ACCESS_KEY" ]; then
    [ "$verbose" ] && echo "using env var"
elif aws configure get aws_access_key_id >/dev/null && aws configure get aws_secret_access_key >/dev/null; then
    [ "$verbose" ] && echo "using profile values"
    AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
    AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
    AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
elif aws configure get credential_process >/dev/null; then
    [ "$verbose" ] && echo "using credential_process"
    credentials=$(eval "$(aws configure get credential_process)" | jq -r '[.AccessKeyId, .SecretAccessKey, .SessionToken] | join("|")') || exit 1
    AWS_ACCESS_KEY_ID=$(echo "$credentials" | cut -d'|' -f1)
    AWS_SECRET_ACCESS_KEY=$(echo "$credentials" | cut -d'|' -f2)
    AWS_SESSION_TOKEN=$(echo "$credentials" | cut -d'|' -f3)
fi

[ "$verbose" ] && echo "using credential: $(aws sts get-caller-identity)"

curl --aws-sigv4 "$sigv4" --user "$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY" -H "x-amz-security-token:$AWS_SESSION_TOKEN" $verbose "${curl_args[@]}"
