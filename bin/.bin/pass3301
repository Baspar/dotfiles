#!/bin/bash

# PARAMS
DIR="$HOME/.pass/"
DEFAULT_VALUE=""
NB_SECOND=5

# FUNCTION
function CREATE_PASSWORD () {
    SELECTED_FILE="$1"
    TEXT="Type the password you want to use"
    while :
    do
        PASS1=$(rofi \
            -i \
            -p "Password> " \
            -dmenu \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "${TEXT}" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        PASS2=$(rofi \
            -i \
            -p "Password> " \
            -dmenu \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg 'Type a second time' \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        if [ "$PASS1" = "$PASS2" ]
        then
            break
        else
            TEXT="Passwords doesn't match, please try again"
        fi
    done
    REAL_FILE_NAME=$(echo "$SELECTED_FILE" | sed 's/ /_/g')
    TEXT="Please enter the regexp to be use to generate the password"
    REGEXP="A-Za-z0-9-_"
    while :
    do
        REGEXP=$(rofi \
            -i \
            -p "Regexp> " \
            -dmenu \
            -fullscreen \
            -filter "$REGEXP" \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "$TEXT" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1

        LENGTH="12"
        TEXT="Please enter the length of the password"
        while :
        do
            LENGTH=$(rofi \
                -i \
                -p "Length> " \
                -dmenu \
                -fullscreen \
                -filter "$LENGTH" \
                -font 'MonofurForPowerline Nerd Font 30' \
                -theme '/home/baspar/.config/rofi/baspar.rasi' \
                -mesg "$TEXT" \
                -matching fuzzy)
            [ $? -ne 0 ] && exit 1
            if [ $(echo "$LENGTH" | grep "^[1-9][0-9]*$") ]
            then
                break
            else
                TEXT="You did not enter a proper length (digit only)"
            fi
        done

        RANDOM_PASSWORD=$(< /dev/urandom tr -dc "$REGEXP" | head -c$LENGTH)
        if [ $? -ne 0 ]
        then
            TEXT="The regexp seems to be invalid, try again"
        else
            break
        fi
    done

    ENCRYPTED_RANDOM_PASSWORD=$(echo "$RANDOM_PASSWORD" | openssl aes-256-cbc -pass "pass:$PASS1")

    echo -n "$ENCRYPTED_RANDOM_PASSWORD" > "$SELECTED_FILE"
    notify-send "Password saved"
    return 0
}
function DECODE_FILE () {
    SELECTED_FILE="$1"
    TEXT="Type the password to decrypt"
    while :
    do
        PASS=$(rofi \
            -i \
            -dmenu \
            -p "Password> " \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "${TEXT}" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        decrypted=$(cat "$SELECTED_FILE" | openssl aes-256-cbc -d -pass "pass:$PASS")
        [ $? -ne 0 ] && {
            TEXT="Incorrect Password, try again"
        } || {
            break
        }
    done

    echo -n "$decrypted" | xsel --clipboard
    while [ $NB_SECOND -gt 0 ]
    do
        if [ $NB_SECOND -le 2 ]
        then
            notify-send -r 42 "Password copied for ${NB_SECOND}s" -u critical
        else
            notify-send -r 42 "Password copied for ${NB_SECOND}s"
        fi
        NB_SECOND=$((NB_SECOND - 1))
        sleep 1
    done
    echo -n "" | xsel --clipboard
    notify-send -r 42 "Password cleared"
}
function HELP () {
    echo "Alt-h => Show this help
    Alt-c => Change the password used to encrypt
    Alt-r => Regenerate a new password" |
        sed 's/^\ *//g' |
        rofi \
            -i \
            -dmenu \
            -p "Help> " \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -matching fuzzy >> /dev/null
    [ $? -ne 0 ] && exit 0
}
function REGENERATE_PASSWORD () {
    SELECTED_FILE="$1"
    TEXT="Type the password to decrypt"
    while :
    do
        PASS=$(rofi \
            -i \
            -dmenu \
            -p "Password> " \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "${TEXT}" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        DECRYPTED=$(cat "$SELECTED_FILE" | openssl aes-256-cbc -d -pass "pass:$PASS")
        [ $? -ne 0 ] && {
            TEXT="Incorrect Password, try again"
        } || {
            break
        }
    done

    REAL_FILE_NAME=$(echo "$SELECTED_FILE" | sed 's/ /_/g')
    TEXT="Please enter the regexp to be use to generate the password"
    REGEXP="A-Za-z0-9-_"
    while :
    do
        REGEXP=$(rofi \
            -i \
            -p "Regexp> " \
            -dmenu \
            -fullscreen \
            -filter "$REGEXP" \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "$TEXT" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1

        LENGTH="12"
        TEXT="Please enter the length of the password"
        while :
        do
            LENGTH=$(rofi \
                -i \
                -p "Length> " \
                -dmenu \
                -fullscreen \
                -filter "$LENGTH" \
                -font 'MonofurForPowerline Nerd Font 30' \
                -theme '/home/baspar/.config/rofi/baspar.rasi' \
                -mesg "$TEXT" \
                -matching fuzzy)
            [ $? -ne 0 ] && exit 1
            if [ $(echo "$LENGTH" | grep "^[1-9][0-9]*$") ]
            then
                break
            else
                TEXT="You did not enter a proper length (digit only)"
            fi
        done

        RANDOM_PASSWORD=$(< /dev/urandom tr -dc "$REGEXP" | head -c$LENGTH)
        if [ $? -ne 0 ]
        then
            TEXT="The regexp seems to be invalid, try again"
        else
            break
        fi
    done

    ENCRYPTED_RANDOM_PASSWORD=$(echo "$RANDOM_PASSWORD" | openssl aes-256-cbc -pass "pass:$PASS")

    echo -n "$ENCRYPTED_RANDOM_PASSWORD" > "$SELECTED_FILE"
    notify-send "Password saved"
    return 0
}
function CHANGE_PASSWORD () {
    SELECTED_FILE="$1"
    TEXT="Type the old password"
    DECRYPTED=""
    while :
    do
        OLD_PASS=$(rofi \
            -i \
            -dmenu \
            -p "Password> " \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "${TEXT}" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        DECRYPTED=$(cat "$SELECTED_FILE" | openssl aes-256-cbc -d -pass "pass:$OLD_PASS")
        [ $? -ne 0 ] && {
            TEXT="Incorrect Password, try again"
        } || {
            break
        }
    done

    TEXT="Type the new password"
    while :
    do
        PASS1=$(rofi \
            -i \
            -p "Password> " \
            -dmenu \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg "${TEXT}" \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        PASS2=$(rofi \
            -i \
            -p "Password> " \
            -dmenu \
            -fullscreen \
            -password \
            -font 'MonofurForPowerline Nerd Font 30' \
            -theme '/home/baspar/.config/rofi/baspar.rasi' \
            -mesg 'Type a second time' \
            -matching fuzzy)
        [ $? -ne 0 ] && exit 1
        if [ "$PASS1" = "$PASS2" ]
        then
            break
        else
            TEXT="Passwords doesn't match, please try again"
        fi
    done

    ENCRYPTED_RANDOM_PASSWORD=$(echo "$DECRYPTED" | openssl aes-256-cbc -pass "pass:$PASS1")

    echo -n "$ENCRYPTED_RANDOM_PASSWORD" > "$SELECTED_FILE"
    notify-send "Password saved"
    return 0
}
function ERROR () {
    echo "Error"
}

while :
do
    FILES=$(ls "$DIR" | grep "\.pass$" | sed "s/\.pass//g")
    RELATIVE_SELECTED_FILE=$(echo -e "$FILES" | rofi \
        -i \
        -p "Search> " \
        -dmenu \
        -fullscreen \
        -font 'MonofurForPowerline Nerd Font 30' \
        -theme '/home/baspar/.config/rofi/baspar.rasi' \
        -mesg 'Which password do you want? (Alt-h: Help)' \
        -matching fuzzy \
        -kb-custom-2 "Alt+h" \
        -kb-custom-3 "Alt+r" \
        -kb-custom-4 "Alt+c"
    )
    EXIT_CODE=$?
    [ $EXIT_CODE -eq 11 ] && {
        HELP
        continue
    }
    SELECTED_FILE="$DIR/$RELATIVE_SELECTED_FILE.pass"
    [ $EXIT_CODE -eq 12 ] && break
    [ $EXIT_CODE -eq 13 ] && break
    [ $EXIT_CODE -ne 0 ] && exit 1
    break
done

if [ -f "$SELECTED_FILE" ]
then
    if [ $EXIT_CODE -eq 12 ]
    then
        REGENERATE_PASSWORD "$SELECTED_FILE"
    elif [ $EXIT_CODE -eq 13 ]
    then
        CHANGE_PASSWORD "$SELECTED_FILE"
    else
        DECODE_FILE "$SELECTED_FILE"
    fi
else
    [ $EXIT_CODE -eq 12 || $EXIT_CODE -eq 13 ] && {
        ERROR "$SELECTED_FILE"
    } || {
        CREATE_PASSWORD "$SELECTED_FILE"
    }
fi

