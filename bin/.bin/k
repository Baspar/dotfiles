#!/usr/bin/env bash

###########
# Helpers #
###########
function WARNING() {
    CMD="$1"

    echo ''
    echo $'\e[31mWarning\e[0m: Double check your command'
    echo "$CMD"

    echo ''
    echo 'Are you sure this is correct ? [yN]'
    read -p '> ' CONFIRM

    echo ''

    [[ $? -eq 0 && ( $CONFIRM = "Y" || $CONFIRM = "y" ) ]] || {
        echo "Cancelling"
        return
    }

    eval "$CMD"
}
function _fzf_tabular() {
    CMD="$1 | sed \"1s/^/Last update: \$(date +%H:%M:%S)\n/\""
    NAME="$2"
    shift 2

    OUT=$(eval "$CMD" | fzf --prompt="$NAME> " --height=20 --expect=ctrl-c --bind "ctrl-r:reload:$CMD" --layout=reverse --header-lines=2 $*)
    S=$?
    echo "$OUT" | head -n 1 | grep "ctrl-c" &> /dev/null && return 42
    [ $S -eq 0 ] || return $S

    echo "$OUT" | tail -n +2 | sed 's/ \{2,\}/\n/g'
}
function _fzf_kubectl() {
    KUBECONFIG="$1"
    TYPE="$2"
    NAME="$3"
    MAYBE_NAMESPACE="$4"

    CMD="KUBECONFIG='$KUBECONFIG' kubectl get '$TYPE'"

    if [ -n "$MAYBE_NAMESPACE" ]; then
        CMD+=" -n '$MAYBE_NAMESPACE'"
    else
        CMD+=" -A"
    fi

    _fzf_tabular "$CMD" "$NAME"
}
function _fzf_options() {
    PROMPT="$1"
    shift
    OPTIONS=("$@")

    OUT=$(printf "%s\n" "${OPTIONS[@]}" | fzf --prompt="${PROMPT}> " --expect=ctrl-c --height=20 --layout=reverse)
    S=$?
    echo "$OUT" | head -n 1 | grep "ctrl-c" &> /dev/null && exit
    [ $S -eq 0 ] || return $S


    echo "$OUT" | tail -n +2
}

#######
# Job #
#######
function _jobs_actions() {
    KUBECONFIG="$1"
    NAMESPACE="$2"
    JOB="$3"

    OPTIONS=( "Logs" "Logs -f" "Describe" "Duplicate job" "YAML" )

    OUT=$(_fzf_options "Actions" "${OPTIONS[@]}")
    S=$?
    [ $S -eq 0 ] || return $S

    case "$OUT" in
        "YAML")
            KUBECONFIG="$1" kubectl get -n "$NAMESPACE" "jobs/$JOB" -o yaml
            ;;
        "Logs")
            KUBECONFIG="$KUBECONFIG" kubectl logs -n "$NAMESPACE" "jobs/$JOB"
            ;;
        "Logs -f")
            KUBECONFIG="$KUBECONFIG" kubectl logs -n "$NAMESPACE" "jobs/$JOB" -f
            ;;
        "Describe")
            KUBECONFIG="$KUBECONFIG" kubectl describe -n "$NAMESPACE" "jobs/$JOB"
            ;;
        "Duplicate job")
            YAML_FILE="$(mktemp).yaml"
            KUBECONFIG="$KUBECONFIG" kubectl get job -n "$NAMESPACE" "$JOB" -o yaml | yq -y 'del(.status, .spec.selector, .spec.template.metadata.labels) | .metadata = {generateName: (.metadata.name + "-")}' >> "$YAML_FILE"

            S=$?
            [ $S -eq 0 ] || return $S

            [ "$EDITOR" ] || {
                EDITOR="vim"
            }

            $EDITOR "$YAML_FILE"

            S=$?
            [ $S -eq 0 ] || return $S

            WARNING "yq . '$YAML_FILE' | KUBECONFIG='$KUBECONFIG' kubectl create -n '$NAMESPACE' -f -"
            ;;
    esac
}
function _fzf-k8s-jobs() {
    MAYBE_NAMESPACE="$2"

    while :; do
        OUT=$(_fzf_kubectl "$1" "jobs" "Jobs" "$MAYBE_NAMESPACE")
        S=$?
        [ $S -eq 0 ] || return $S

        if [ -n "$MAYBE_NAMESPACE" ]; then
            NAMESPACE="$MAYBE_NAMESPACE"
            JOB=$(echo "$OUT" | head -n 1)
        else
            NAMESPACE=$(echo "$OUT" | head -n 1)
            JOB=$(echo "$OUT" | head -n 2 | tail -n 1)
        fi

        _jobs_actions "$1" "$NAMESPACE" "$JOB"
        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}

###########
# Cronjob #
###########
function _cronjobs_actions() {
    KUBECONFIG="$1"
    NAMESPACE="$2"
    CRONJOB="$3"

    OPTIONS=( "Jobs" "Describe" "Create job" "YAML" )

    OUT=$(_fzf_options "Actions" "${OPTIONS[@]}")
    S=$?
    [ $S -eq 0 ] || return $S

    case "$OUT" in
        "YAML")
            KUBECONFIG="$1" kubectl get -n "$NAMESPACE" "cronjobs/$CRONJOB" -o yaml
            ;;
        "Jobs")
            OUT=$(_fzf_tabular "kubectl get jobs -n '$NAMESPACE'" "Job" -q "^$CRONJOB")
            S=$?
            [ $S -eq 0 ] || return $S

            JOB=$(echo "$OUT" | head -n 1)
            _jobs_actions "$KUBECONFIG" "$NAMESPACE" "$JOB"
            ;;
        "Describe")
            KUBECONFIG="$KUBECONFIG" kubectl describe -n "$NAMESPACE" "cronjobs/$CRONJOB"
            ;;
        "Create job")
            read -p $'\e[1mNew name\e[0m> '$CRONJOB'-' POSTFIX
            S=$?
            [ $S -eq 0 ] || return $S

            WARNING "KUBECONFIG='$KUBECONFIG' kubectl create job -n '$NAMESPACE' --from='cronjobs/$CRONJOB' '$CRONJOB-$POSTFIX'"
            ;;
    esac
}
function _fzf-k8s-cronjobs() {
    MAYBE_NAMESPACE="$2"

    while :; do
        OUT=$(_fzf_kubectl "$1" "cronjobs" "Cronjobs" "$MAYBE_NAMESPACE")
        S=$?
        [ $S -eq 0 ] || return $S

        if [ -n "$MAYBE_NAMESPACE" ]; then
            NAMESPACE="$MAYBE_NAMESPACE"
            CRONJOB=$(echo "$OUT" | head -n 1)
        else
            NAMESPACE=$(echo "$OUT" | head -n 1)
            CRONJOB=$(echo "$OUT" | head -n 2 | tail -n 1)
        fi
        _cronjobs_actions "$1" "$NAMESPACE" "$CRONJOB"
        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}

########
# Pods #
########
function _pods_actions() {
    KUBECONFIG="$1"
    NAMESPACE="$2"
    POD="$3"

    OPTIONS=( "Logs" "Logs -f" "Describe" "Shell" "Execute" "YAML" )

    OUT=$(_fzf_options "Actions" "${OPTIONS[@]}")
    S=$?
    [ $S -eq 0 ] || return $S

    case "$OUT" in
        "YAML")
            KUBECONFIG="$1" kubectl get -n "$NAMESPACE" "pods/$POD" -o yaml
            ;;
        "Logs")
            KUBECONFIG="$1" kubectl logs -n "$NAMESPACE" "pods/$POD"
            ;;
        "Logs -f")
            KUBECONFIG="$1" kubectl logs -n "$NAMESPACE" "pods/$POD" -f
            ;;
        "Describe")
            KUBECONFIG="$1" kubectl describe -n "$NAMESPACE" "pods/$POD"
            ;;
        "Shell")
            KUBECONFIG="$1" kubectl exec -it -n "$NAMESPACE" "pods/$POD" -- sh
            ;;
        "Execute")
            read -p $'\e[1mCommand\e[0m> ' COMMAND

            [ $? -eq 0 ] && [ -n "$COMMAND" ] || return

            KUBECONFIG="$1" kubectl exec -it -n "$NAMESPACE" "pods/$POD" -- $COMMAND
            ;;
    esac
}
function _fzf-k8s-pods() {
    MAYBE_NAMESPACE="$2"

    while :; do
        OUT=$(_fzf_kubectl "$1" "pods" "Pods" "$MAYBE_NAMESPACE")

        S=$?
        [ $S -eq 0 ] || return $S

        if [ -n "$MAYBE_NAMESPACE" ]; then
            NAMESPACE="$MAYBE_NAMESPACE"
            POD=$(echo "$OUT" | head -n 1)
        else
            NAMESPACE=$(echo "$OUT" | head -n 1)
            POD=$(echo "$OUT" | head -n 2 | tail -n 1)
        fi

        _pods_actions "$1" "$NAMESPACE" "$POD"
        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}

##############
# Namespaces #
##############
function _namespaces_actions() {
    KUBECONFIG="$1"
    NAMESPACE="$2"

    OPTIONS=( "Pods" "Services" "Cronjobs" "Jobs" "Deployments" )

    while :; do

        OUT=$(_fzf_options "Actions (In $NAMESPACE)" "${OPTIONS[@]}")
        S=$?
        [ $S -eq 0 ] || return $S

        MODE=$(echo "$OUT" | tail -n 1)

        CONFIG="$HOME/.kube/"${CONFIGS[$INDEX]}
        case "$MODE" in
            Jobs)
                _fzf-k8s-jobs "$CONFIG" "$NAMESPACE"
                ;;
            Cronjobs)
                _fzf-k8s-cronjobs "$CONFIG" "$NAMESPACE"
                ;;
            Pods)
                _fzf-k8s-pods "$CONFIG" "$NAMESPACE"
                ;;
            Namespaces)
                _fzf-k8s-namespaces "$CONFIG" "$NAMESPACE"
                ;;
            Services)
                _fzf-k8s-services "$CONFIG" "$NAMESPACE"
                ;;
            Deployments)
                _fzf-k8s-deployments "$CONFIG" "$NAMESPACE"
                ;;
        esac

        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}
function _fzf-k8s-namespaces() {
    while :; do
        OUT=$(_fzf_kubectl "$1" "namespaces" "Namespaces")
        S=$?
        [ $S -eq 0 ] || return $S

        NAMESPACE=$(echo "$OUT" | head -n 1)

        _namespaces_actions "$1" "$NAMESPACE"
        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}

############
# Services #
############
function _services_actions() {
    KUBECONFIG="$1"
    NAMESPACE="$2"
    SERVICE="$3"
    PORTS="$4"

    OPTIONS=( "Logs" "Logs -f" "Describe" "Port forward" "YAML" )

    OUT=$(_fzf_options "Actions" "${OPTIONS[@]}")
    S=$?
    [ $S -eq 0 ] || return $S

    case "$OUT" in
        "YAML")
            KUBECONFIG="$1" kubectl get -n "$NAMESPACE" "svc/$SERVICE" -o yaml
            ;;
        "Port forward")
            OUT=$(_fzf_tabular "kubectl get pods -n '$NAMESPACE'" "Pod" -q "^$SERVICE")
            S=$?
            [ $S -eq 0 ] || return $S

            POD=$(echo "$OUT" | head -n 1)

            PORTS_FORWARD=$(echo $PORTS | tr , '\n' | fzf -m --height=20 --layout=reverse --prompt="Select ports to forward (Tab for multi-select)> " | sed 's#[:/].*##g')
            S=$?
            [ $S -eq 0 ] || return $S

            PORT_PARAM=""
            for PORT in $PORTS_FORWARD; do
              while :
              do
                echo -e -n "\033[32mForward $PORT to (Keep empty to use $PORT)> \033[0m"
                read PORT_FORWARD
                if [ -z "$PORT_FORWARD" ]
                then
                  echo "Using $PORT"
                  PORT_FORWARD=$PORT
                  break
                elif $(echo $PORT_FORWARD | grep -q -E '^[0-9]+$')
                then
                  break
                else
                  echo " Please enter a valid port"
                fi
              done
              PORT_PARAM="$PORT_PARAM $PORT_FORWARD:$PORT"
            done
            [ -n "$PORT_PARAM" ] || return 1

            kubectl port-forward $ADDRESS --namespace $NAMESPACE $POD$PORT_PARAM
            ;;
        "Logs")
            KUBECONFIG="$1" kubectl logs -n "$NAMESPACE" "svc/$SERVICE"
            ;;
        "Logs -f")
            KUBECONFIG="$1" kubectl logs -n "$NAMESPACE" "svc/$SERVICE" -f
            ;;
        "Describe")
            KUBECONFIG="$1" kubectl describe -n "$NAMESPACE" "svc/$SERVICE"
            ;;
    esac
}
function _fzf-k8s-services() {
    MAYBE_NAMESPACE="$2"

    while :; do
        OUT=$(_fzf_kubectl "$1" "svc" "Services" "$MAYBE_NAMESPACE")

        S=$?
        [ $S -eq 0 ] || return $S

        if [ -n "$MAYBE_NAMESPACE" ]; then
            NAMESPACE="$MAYBE_NAMESPACE"
            SERVICE=$(echo "$OUT" | head -n 1)
        else
            NAMESPACE=$(echo "$OUT" | head -n 1)
            SERVICE=$(echo "$OUT" | head -n 2 | tail -n 1)
        fi
        PORTS=$(echo "$OUT" | head -n 6 | tail -n 1)

        _services_actions "$1" "$NAMESPACE" "$SERVICE" "$PORTS"
        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}

###############
# Deployments #
###############
function _deployments_actions() {
    KUBECONFIG="$1"
    NAMESPACE="$2"
    DEPLOY="$3"
    REPLICAS="$4"

    OPTIONS=( "Logs" "Logs -f" "Describe" "Redeploy" "YAML" )

    OUT=$(_fzf_options "Actions" "${OPTIONS[@]}")
    S=$?
    [ $S -eq 0 ] || return $S

    case "$OUT" in
        "YAML")
            KUBECONFIG="$1" kubectl get -n "$NAMESPACE" "deploy/$DEPLOY" -o yaml
            ;;
        "Redeploy")
            echo "Scale down to 0 replicas"
            KUBECONFIG="$1" kubectl scale "deploy/$DEPLOY" -n "$NAMESPACE" --replicas=0
            echo "Scale up to $REPLICAS replicas"
            KUBECONFIG="$1" kubectl scale "deploy/$DEPLOY" -n "$NAMESPACE" --replicas="$REPLICAS"
            ;;
        "Logs")
            KUBECONFIG="$1" kubectl logs -n "$NAMESPACE" "deploy/$DEPLOY"
            ;;
        "Logs -f")
            KUBECONFIG="$1" kubectl logs -n "$NAMESPACE" "deploy/$DEPLOY" -f
            ;;
        "Describe")
            KUBECONFIG="$1" kubectl describe -n "$NAMESPACE" "deploy/$DEPLOY"
            ;;
    esac
}
function _fzf-k8s-deployments() {
    MAYBE_NAMESPACE="$2"

    while :; do
        OUT=$(_fzf_kubectl "$1" "deploy" "Deployments" "$MAYBE_NAMESPACE")

        S=$?
        [ $S -eq 0 ] || return $S

        if [ -n "$NAMESPACE" ]; then
            NAMESPACE="$MAYBE_NAMESPACE"
            DEPLOY=$(echo "$OUT" | head -n 1 | tail -n 1)
            REPLICAS=$(echo "$OUT" | head -n 3 | tail -n 1)
        else
            NAMESPACE=$(echo "$OUT" | head -n 1 | tail -n 1)
            DEPLOY=$(echo "$OUT" | head -n 2 | tail -n 1)
            REPLICAS=$(echo "$OUT" | head -n 4 | tail -n 1)
        fi

        _deployments_actions "$1" "$NAMESPACE" "$DEPLOY" "$REPLICAS"
        S=$?
        [[ $S -eq 0 || $S -eq 42 ]] && return $S
    done
}

########
# Main #
########
function _main_actions() {
    CONFIG="$1"
    MODE="$2"

    case "$MODE" in
        Jobs)
            _fzf-k8s-jobs $CONFIG
            ;;
        Cronjobs)
            _fzf-k8s-cronjobs $CONFIG
            ;;
        Pods)
            _fzf-k8s-pods $CONFIG
            ;;
        Namespaces)
            _fzf-k8s-namespaces $CONFIG
            ;;
        Services)
            _fzf-k8s-services $CONFIG
            ;;
        Deployments)
            _fzf-k8s-deployments $CONFIG
            ;;
    esac

}
function main() {
    INDEX=0
    CONFIGS=( $(ls ~/.kube | grep "config") )
    NB_CONFIGS="${#CONFIGS[@]}"
    while :;do
      HI_CONFIGS=( ${CONFIGS[*]} )
      HI_CONFIGS[$INDEX]="\033[1m${HI_CONFIGS[$INDEX]}\033[0m"

      OPTIONS=( "Pods" "Namespaces" "Services" "Cronjobs" "Jobs" "Deployments" )

      OUT=$(echo -e "Config [${HI_CONFIGS[*]}] \033[3m(Left / Right to change config)\033[0m$(printf "\n%s" "${OPTIONS[@]}")" \
          | fzf --prompt="K8S> " --height=20 --layout=reverse --header-lines=1 --expect=left,right,ctrl-h,ctrl-l)

      S=$?
      [ $S -eq 0 ] || return $S

      COMMAND=$(echo "$OUT" | head -n 1)
      MODE=$(echo "$OUT" | tail -n 1)

      case "$COMMAND" in
          "left"|"ctrl-h" )
              INDEX=$(echo "($INDEX + $NB_CONFIGS - 1) % $NB_CONFIGS" | bc)
              ;;
          "right"|"ctrl-l")
              INDEX=$(echo "($INDEX + 1) % $NB_CONFIGS" | bc)
              ;;
          *)
              _main_actions "$HOME/.kube/${CONFIGS[$INDEX]}" "$MODE"
              [[ $? -eq 0 || $? -eq 42 ]] && exit
      esac
    done
}

COMMANDS=( "fzf" "kubectl" )
for COMMAND in ${COMMANDS[*]}; do
    command -v "$COMMAND" &> /dev/null || {
        echo "$COMMAND not found. Please install it"
        exit 1
    }
done

main
